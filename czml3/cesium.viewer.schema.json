{
  "$ref": "#/definitions/ViewerOptions",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Cartesian3": {
      "additionalProperties": false,
      "description": "A 3D Cartesian point.",
      "properties": {
        "x": {
          "description": "The X component.",
          "type": "number"
        },
        "y": {
          "description": "The Y component.",
          "type": "number"
        },
        "z": {
          "description": "The Z component.",
          "type": "number"
        }
      },
      "required": [
        "x",
        "y",
        "z"
      ],
      "type": "object"
    },
    "Clock": {
      "additionalProperties": false,
      "description": "A simple clock for keeping track of simulated time.",
      "properties": {
        "canAnimate": {
          "description": "Indicates whether  {@link  Clock#tick  }  can advance time.  This could be false if data is being buffered, for example.  The clock will only advance time when both\n {@link  Clock#canAnimate  }  and  {@link  Clock#shouldAnimate  }  are true.",
          "type": "boolean"
        },
        "clockRange": {
          "$ref": "#/definitions/ClockRange",
          "description": "Determines how the clock should behave when\n {@link  Clock#startTime  }  or  {@link  Clock#stopTime  } \nis reached."
        },
        "clockStep": {
          "$ref": "#/definitions/ClockStep",
          "description": "Determines if calls to  {@link  Clock#tick  }  are frame dependent or system clock dependent. Changing this property to  {@link  ClockStep.SYSTEM_CLOCK }  will set\n {@link  Clock#multiplier  }  to 1.0,  {@link  Clock#shouldAnimate  }  to true, and\n {@link  Clock#currentTime  }  to the current system clock time."
        },
        "currentTime": {
          "$ref": "#/definitions/JulianDate",
          "description": "The current time. Changing this property will change\n {@link  Clock#clockStep  }  from  {@link  ClockStep.SYSTEM_CLOCK }  to\n {@link  ClockStep.SYSTEM_CLOCK_MULTIPLIER } ."
        },
        "multiplier": {
          "description": "Gets or sets how much time advances when  {@link  Clock#tick  }  is called. Negative values allow for advancing backwards. If  {@link  Clock#clockStep  }  is set to  {@link  ClockStep.TICK_DEPENDENT } , this is the number of seconds to advance. If  {@link  Clock#clockStep  }  is set to  {@link  ClockStep.SYSTEM_CLOCK_MULTIPLIER } , this value is multiplied by the elapsed system time since the last call to  {@link  Clock#tick  } . Changing this property will change\n {@link  Clock#clockStep  }  from  {@link  ClockStep.SYSTEM_CLOCK }  to\n {@link  ClockStep.SYSTEM_CLOCK_MULTIPLIER } .",
          "type": "number"
        },
        "onStop": {
          "$ref": "#/definitions/Event",
          "description": "An  {@link  Event }  that is fired whenever  {@link  Clock#stopTime  }  is reached."
        },
        "onTick": {
          "$ref": "#/definitions/Event",
          "description": "An  {@link  Event }  that is fired whenever  {@link  Clock#tick  }  is called."
        },
        "shouldAnimate": {
          "description": "Indicates whether  {@link  Clock#tick  }  should attempt to advance time. The clock will only advance time when both\n {@link  Clock#canAnimate  }  and  {@link  Clock#shouldAnimate  }  are true. Changing this property will change\n {@link  Clock#clockStep  }  from  {@link  ClockStep.SYSTEM_CLOCK }  to\n {@link  ClockStep.SYSTEM_CLOCK_MULTIPLIER } .",
          "type": "boolean"
        },
        "startTime": {
          "$ref": "#/definitions/JulianDate",
          "description": "The start time of the clock."
        },
        "stopTime": {
          "$ref": "#/definitions/JulianDate",
          "description": "The stop time of the clock."
        }
      },
      "required": [
        "startTime",
        "stopTime",
        "clockRange",
        "canAnimate",
        "onTick",
        "onStop",
        "currentTime",
        "multiplier",
        "clockStep",
        "shouldAnimate"
      ],
      "type": "object"
    },
    "ClockRange": {
      "description": "Constants used by  {@link  Clock#tick  }  to determine behavior when  {@link  Clock#startTime  }  or  {@link  Clock#stopTime  }  is reached.",
      "enum": [
        0,
        1,
        2
      ],
      "type": "number"
    },
    "ClockStep": {
      "description": "Constants to determine how much time advances with each call to  {@link  Clock#tick  } .",
      "enum": [
        0,
        1,
        2
      ],
      "type": "number"
    },
    "ClockViewModel": {
      "additionalProperties": false,
      "description": "A view model which exposes a  {@link  Clock }  for user interfaces.",
      "properties": {
        "canAnimate": {
          "description": "Gets or sets whether the clock can animate. See  {@link  Clock#canAnimate  } . This property is observable.",
          "type": "boolean"
        },
        "clock": {
          "$ref": "#/definitions/Clock",
          "description": "Gets the underlying Clock."
        },
        "clockRange": {
          "$ref": "#/definitions/ClockRange",
          "description": "Gets or sets the clock range setting. See  {@link  Clock#clockRange  } . This property is observable."
        },
        "clockStep": {
          "$ref": "#/definitions/ClockStep",
          "description": "Gets or sets the clock step setting. See  {@link  Clock#clockStep  } . This property is observable."
        },
        "currentTime": {
          "$ref": "#/definitions/JulianDate",
          "description": "Gets or sets the current time. See  {@link  Clock#currentTime  } . This property is observable."
        },
        "multiplier": {
          "description": "Gets or sets the clock multiplier. See  {@link  Clock#multiplier  } . This property is observable.",
          "type": "number"
        },
        "shouldAnimate": {
          "description": "Gets or sets whether the clock should animate. See  {@link  Clock#shouldAnimate  } . This property is observable.",
          "type": "boolean"
        },
        "startTime": {
          "$ref": "#/definitions/JulianDate",
          "description": "Gets or sets the start time of the clock. See  {@link  Clock#startTime  } . This property is observable."
        },
        "stopTime": {
          "$ref": "#/definitions/JulianDate",
          "description": "Gets or sets the stop time of the clock. See  {@link  Clock#stopTime  } . This property is observable."
        },
        "systemTime": {
          "$ref": "#/definitions/JulianDate",
          "description": "Gets the current system time. This property is observable."
        }
      },
      "required": [
        "systemTime",
        "startTime",
        "stopTime",
        "currentTime",
        "multiplier",
        "clockStep",
        "clockRange",
        "canAnimate",
        "shouldAnimate",
        "clock"
      ],
      "type": "object"
    },
    "Command": {
      "additionalProperties": false,
      "description": "A Command is a function with an extra <code>canExecute</code> observable property to determine whether the command can be executed.  When executed, a Command function will check the value of <code>canExecute</code> and throw if false.\n\nThis type describes an interface and is not intended to be instantiated directly. See  {@link  createCommand }  to create a command from a function.",
      "properties": {
        "afterExecute": {
          "$ref": "#/definitions/Event",
          "description": "Gets an event which is raised after the command executes, the event is raised with the return value of the command as its only parameter."
        },
        "beforeExecute": {
          "$ref": "#/definitions/Event",
          "description": "Gets an event which is raised before the command executes, the event is raised with an object containing two properties: a <code>cancel</code> property, which if set to false by the listener will prevent the command from being executed, and an <code>args</code> property, which is the array of arguments being passed to the command."
        },
        "canExecute": {
          "description": "Gets whether this command can currently be executed.  This property is observable.",
          "type": "boolean"
        }
      },
      "required": [
        "canExecute",
        "beforeExecute",
        "afterExecute"
      ],
      "type": "object"
    },
    "Ellipsoid": {
      "additionalProperties": false,
      "description": "A quadratic surface defined in Cartesian coordinates by the equation <code>(x / a)^2 + (y / b)^2 + (z / c)^2 = 1</code>.  Primarily used by Cesium to represent the shape of planetary bodies.\n\nRather than constructing this object directly, one of the provided constants is normally used.",
      "properties": {
        "maximumRadius": {
          "description": "Gets the maximum radius of the ellipsoid.",
          "type": "number"
        },
        "minimumRadius": {
          "description": "Gets the minimum radius of the ellipsoid.",
          "type": "number"
        },
        "oneOverRadii": {
          "$ref": "#/definitions/Cartesian3",
          "description": "Gets one over the radii of the ellipsoid."
        },
        "oneOverRadiiSquared": {
          "$ref": "#/definitions/Cartesian3",
          "description": "Gets one over the squared radii of the ellipsoid."
        },
        "radii": {
          "$ref": "#/definitions/Cartesian3",
          "description": "Gets the radii of the ellipsoid."
        },
        "radiiSquared": {
          "$ref": "#/definitions/Cartesian3",
          "description": "Gets the squared radii of the ellipsoid."
        },
        "radiiToTheFourth": {
          "$ref": "#/definitions/Cartesian3",
          "description": "Gets the radii of the ellipsoid raise to the fourth power."
        }
      },
      "required": [
        "radii",
        "radiiSquared",
        "radiiToTheFourth",
        "oneOverRadii",
        "oneOverRadiiSquared",
        "minimumRadius",
        "maximumRadius"
      ],
      "type": "object"
    },
    "Event": {
      "additionalProperties": false,
      "description": "A generic utility class for managing subscribers for a particular event. This class is usually instantiated inside of a container class and exposed as a property for others to subscribe to.",
      "properties": {
        "numberOfListeners": {
          "description": "The number of listeners currently subscribed to the event.",
          "type": "number"
        }
      },
      "required": [
        "numberOfListeners"
      ],
      "type": "object"
    },
    "GeocoderService": {
      "additionalProperties": false,
      "description": "Provides geocoding through an external service. This type describes an interface and is not intended to be used.",
      "type": "object"
    },
    "JulianDate": {
      "additionalProperties": false,
      "description": "Represents an astronomical Julian date, which is the number of days since noon on January 1, -4712 (4713 BC). For increased precision, this class stores the whole number part of the date and the seconds part of the date in separate components.  In order to be safe for arithmetic and represent leap seconds, the date is always stored in the International Atomic Time standard\n {@link  TimeStandard.TAI } .",
      "properties": {
        "dayNumber": {
          "description": "Gets or sets the number of whole days.",
          "type": "number"
        },
        "secondsOfDay": {
          "description": "Gets or sets the number of seconds into the current day.",
          "type": "number"
        }
      },
      "required": [
        "dayNumber",
        "secondsOfDay"
      ],
      "type": "object"
    },
    "MapMode2D": {
      "description": "Describes how the map will operate in 2D.",
      "enum": [
        0,
        1
      ],
      "type": "number"
    },
    "MapProjection": {
      "additionalProperties": false,
      "description": "Defines how geodetic ellipsoid coordinates ( {@link  Cartographic } ) project to a flat map like Cesium's 2D and Columbus View modes.",
      "properties": {
        "ellipsoid": {
          "$ref": "#/definitions/Ellipsoid",
          "description": "Gets the  {@link  Ellipsoid } ."
        }
      },
      "required": [
        "ellipsoid"
      ],
      "type": "object"
    },
    "ProviderViewModel": {
      "additionalProperties": false,
      "description": "A view model that represents each item in the  {@link  BaseLayerPicker } .",
      "properties": {
        "category": {
          "description": "Gets the category",
          "type": "string"
        },
        "creationCommand": {
          "$ref": "#/definitions/Command",
          "description": "Gets the Command that creates one or more providers which will be added to the globe when this item is selected."
        },
        "iconUrl": {
          "description": "Gets the icon.  This property is observable.",
          "type": "string"
        },
        "name": {
          "description": "Gets the display name.  This property is observable.",
          "type": "string"
        },
        "tooltip": {
          "description": "Gets the tooltip.  This property is observable.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "tooltip",
        "iconUrl",
        "creationCommand",
        "category"
      ],
      "type": "object"
    },
    "SceneMode": {
      "description": "Indicates if the scene is viewed in 3D, 2D, or 2.5D Columbus view.",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "type": "number"
    },
    "ShadowMode": {
      "description": "Specifies whether the object casts or receives shadows from light sources when shadows are enabled.",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "type": "number"
    },
    "SkyAtmosphere": {
      "additionalProperties": false,
      "description": "An atmosphere drawn around the limb of the provided ellipsoid.  Based on\n {@link  https ://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html|Accurate Atmospheric Scattering } \nin GPU Gems 2. <p> This is only supported in 3D. Atmosphere is faded out when morphing to 2D or Columbus view. </p>",
      "properties": {
        "brightnessShift": {
          "description": "The brightness shift to apply to the atmosphere. Defaults to 0.0 (no shift). A brightness shift of -1.0 is complete darkness, which will let space show through.",
          "type": "number"
        },
        "ellipsoid": {
          "$ref": "#/definitions/Ellipsoid",
          "description": "Gets the ellipsoid the atmosphere is drawn around."
        },
        "hueShift": {
          "description": "The hue shift to apply to the atmosphere. Defaults to 0.0 (no shift). A hue shift of 1.0 indicates a complete rotation of the hues available.",
          "type": "number"
        },
        "perFragmentAtmosphere": {
          "description": "Compute atmosphere per-fragment instead of per-vertex. This produces better looking atmosphere with a slight performance penalty.",
          "type": "boolean"
        },
        "saturationShift": {
          "description": "The saturation shift to apply to the atmosphere. Defaults to 0.0 (no shift). A saturation shift of -1.0 is monochrome.",
          "type": "number"
        },
        "show": {
          "description": "Determines if the atmosphere is shown.",
          "type": "boolean"
        }
      },
      "required": [
        "show",
        "perFragmentAtmosphere",
        "hueShift",
        "saturationShift",
        "brightnessShift",
        "ellipsoid"
      ],
      "type": "object"
    },
    "SkyBox": {
      "additionalProperties": false,
      "description": "A sky box around the scene to draw stars.  The sky box is defined using the True Equator Mean Equinox (TEME) axes. <p> This is only supported in 3D.  The sky box is faded out when morphing to 2D or Columbus view.  The size of the sky box must not exceed  {@link  Scene#maximumCubeMapSize  } . </p>",
      "properties": {
        "show": {
          "description": "Determines if the sky box will be shown.",
          "type": "boolean"
        },
        "sources": {
          "description": "The sources used to create the cube map faces: an object with <code>positiveX</code>, <code>negativeX</code>, <code>positiveY</code>, <code>negativeY</code>, <code>positiveZ</code>, and <code>negativeZ</code> properties. These can be either URLs or <code>Image</code> objects."
        }
      },
      "required": [
        "sources",
        "show"
      ],
      "type": "object"
    },
    "ViewerOptions": {
      "additionalProperties": false,
      "properties": {
        "animation": {
          "type": "boolean"
        },
        "automaticallyTrackDataSourceClocks": {
          "type": "boolean"
        },
        "baseLayerPicker": {
          "type": "boolean"
        },
        "clockViewModel": {
          "$ref": "#/definitions/ClockViewModel"
        },
        "contextOptions": {},
        "fullscreenButton": {
          "type": "boolean"
        },
        "geocoder": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "items": {
                "$ref": "#/definitions/GeocoderService"
              },
              "type": "array"
            }
          ]
        },
        "homeButton": {
          "type": "boolean"
        },
        "imageryProviderViewModels": {
          "items": {
            "$ref": "#/definitions/ProviderViewModel"
          },
          "type": "array"
        },
        "infoBox": {
          "type": "boolean"
        },
        "mapMode2D": {
          "$ref": "#/definitions/MapMode2D"
        },
        "mapProjection": {
          "$ref": "#/definitions/MapProjection"
        },
        "maximumRenderTimeChange": {
          "type": "number"
        },
        "navigationHelpButton": {
          "type": "boolean"
        },
        "navigationInstructionsInitiallyVisible": {
          "type": "boolean"
        },
        "orderIndependentTranslucency": {
          "type": "boolean"
        },
        "projectionPicker": {
          "type": "boolean"
        },
        "requestRenderMode": {
          "type": "boolean"
        },
        "scene3DOnly": {
          "type": "boolean"
        },
        "sceneMode": {
          "$ref": "#/definitions/SceneMode"
        },
        "sceneModePicker": {
          "type": "boolean"
        },
        "selectedImageryProviderViewModel": {
          "$ref": "#/definitions/ProviderViewModel"
        },
        "selectedTerrainProviderViewModel": {
          "$ref": "#/definitions/ProviderViewModel"
        },
        "selectionIndicator": {
          "type": "boolean"
        },
        "shadows": {
          "type": "boolean"
        },
        "shouldAnimate": {
          "type": "boolean"
        },
        "showRenderLoopErrors": {
          "type": "boolean"
        },
        "skyAtmosphere": {
          "anyOf": [
            {
              "$ref": "#/definitions/SkyAtmosphere"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "skyBox": {
          "anyOf": [
            {
              "$ref": "#/definitions/SkyBox"
            },
            {
              "const": false,
              "type": "boolean"
            }
          ]
        },
        "targetFrameRate": {
          "type": "number"
        },
        "terrainProviderViewModels": {
          "items": {
            "$ref": "#/definitions/ProviderViewModel"
          },
          "type": "array"
        },
        "terrainShadows": {
          "$ref": "#/definitions/ShadowMode"
        },
        "timeline": {
          "type": "boolean"
        },
        "useBrowserRecommendedResolution": {
          "type": "boolean"
        },
        "useDefaultRenderLoop": {
          "type": "boolean"
        },
        "vrButton": {
          "type": "boolean"
        }
      },
      "type": "object"
    }
  }
}
