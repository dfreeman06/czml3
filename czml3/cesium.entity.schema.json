{
  "$ref": "#/definitions/Entity",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "BillboardGraphics": {
      "additionalProperties": false,
      "description": "Describes a two dimensional icon located at the position of the containing  {@link  Entity } . <p> <div align='center'> <img src='Images/Billboard.png' width='400' height='300' /><br /> Example billboards </div> </p>",
      "properties": {
        "alignedAxis": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  Cartesian3 }  Property specifying the unit vector axis of rotation in the fixed frame. When set to Cartesian3.ZERO the rotation is from the top of the screen."
        },
        "color": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  that is multiplied with the <code>image</code>. This has two common use cases.  First, the same white texture may be used by many different billboards, each with a different color, to create colored billboards. Second, the color's alpha component can be used to make the billboard translucent as shown below. An alpha of <code>0.0</code> makes the billboard transparent, and <code>1.0</code> makes the billboard opaque. <p> <div align='center'> <table border='0' cellpadding='5'><tr> <td align='center'><code>default</code><br/><img src='Images/Billboard.setColor.Alpha255.png' width='250' height='188' /></td> <td align='center'><code>alpha : 0.5</code><br/><img src='Images/Billboard.setColor.Alpha127.png' width='250' height='188' /></td> </tr></table> </div> </p>"
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "disableDepthTestDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain. When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this billboard will be displayed."
        },
        "eyeOffset": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  Cartesian3 }  Property specifying the billboard's offset in eye coordinates. Eye coordinates is a left-handed coordinate system, where <code>x</code> points towards the viewer's right, <code>y</code> points up, and <code>z</code> points into the screen. <p> An eye offset is commonly used to arrange multiple billboards or objects at the same position, e.g., to arrange a billboard above its corresponding 3D model. </p> Below, the billboard is positioned at the center of the Earth but an eye offset makes it always appear on top of the Earth regardless of the viewer's or Earth's orientation. <p> <div align='center'> <table border='0' cellpadding='5'><tr> <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td> <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td> </tr></table> <code>b.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code> </div> </p>"
        },
        "height": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the height of the billboard in pixels. When undefined, the native height is used."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "horizontalOrigin": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HorizontalOrigin } ."
        },
        "image": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the Image, URI, or Canvas to use for the billboard."
        },
        "imageSubRegion": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying a  {@link  BoundingRectangle }  that defines a sub-region of the <code>image</code> to use for the billboard, rather than the entire image, measured in pixels from the bottom-left."
        },
        "pixelOffset": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  Cartesian2 }  Property specifying the billboard's pixel offset in screen space from the origin of this billboard.  This is commonly used to align multiple billboards and labels at the same position, e.g., an image and text.  The screen space origin is the top, left corner of the canvas; <code>x</code> increases from left to right, and <code>y</code> increases from top to bottom. <p> <div align='center'> <table border='0' cellpadding='5'><tr> <td align='center'><code>default</code><br/><img src='Images/Billboard.setPixelOffset.default.png' width='250' height='188' /></td> <td align='center'><code>b.pixeloffset = new Cartesian2(50, 25);</code><br/><img src='Images/Billboard.setPixelOffset.x50y-25.png' width='250' height='188' /></td> </tr></table> The billboard's origin is indicated by the yellow point. </div> </p>"
        },
        "pixelOffsetScaleByDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets  {@link  NearFarScalar }  Property specifying the pixel offset of the billboard based on the distance from the camera. A billboard's pixel offset will interpolate between the  {@link  NearFarScalar#nearValue  }  and\n {@link  NearFarScalar#farValue  }  while the camera distance falls within the lower and upper bounds of the specified  {@link  NearFarScalar#near  }  and  {@link  NearFarScalar#far  } . Outside of these ranges the billboard's pixel offset remains clamped to the nearest bound."
        },
        "rotation": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the rotation of the image counter clockwise from the <code>alignedAxis</code>."
        },
        "scale": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the uniform scale to apply to the image. A scale greater than <code>1.0</code> enlarges the billboard while a scale less than <code>1.0</code> shrinks it. <p> <div align='center'> <img src='Images/Billboard.setScale.png' width='400' height='300' /><br/> From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>, and <code>2.0</code>. </div> </p>"
        },
        "scaleByDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets  {@link  NearFarScalar }  Property specifying the scale of the billboard based on the distance from the camera. A billboard's scale will interpolate between the  {@link  NearFarScalar#nearValue  }  and\n {@link  NearFarScalar#farValue  }  while the camera distance falls within the lower and upper bounds of the specified  {@link  NearFarScalar#near  }  and  {@link  NearFarScalar#far  } . Outside of these ranges the billboard's scale remains clamped to the nearest bound."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the billboard."
        },
        "sizeInMeters": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying if this billboard's size will be measured in meters."
        },
        "translucencyByDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets  {@link  NearFarScalar }  Property specifying the translucency of the billboard based on the distance from the camera. A billboard's translucency will interpolate between the  {@link  NearFarScalar#nearValue  }  and\n {@link  NearFarScalar#farValue  }  while the camera distance falls within the lower and upper bounds of the specified  {@link  NearFarScalar#near  }  and  {@link  NearFarScalar#far  } . Outside of these ranges the billboard's translucency remains clamped to the nearest bound."
        },
        "verticalOrigin": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  VerticalOrigin } ."
        },
        "width": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the billboard in pixels. When undefined, the native width is used."
        }
      },
      "required": [
        "definitionChanged"
      ],
      "type": "object"
    },
    "BoxGraphics": {
      "additionalProperties": false,
      "description": "Describes a box. The center position and orientation are determined by the containing  {@link  Entity } .",
      "properties": {
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "dimensions": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets  {@link  Cartesian3 }  Property property specifying the length, width, and height of the box."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this box will be displayed."
        },
        "fill": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the box is filled with the provided material."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the material used to fill the box."
        },
        "outline": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying whether the box is outlined."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline. <p> Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}. </p>"
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the box casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the box."
        }
      },
      "required": [
        "definitionChanged"
      ],
      "type": "object"
    },
    "Cesium3DTilesetGraphics": {
      "additionalProperties": false,
      "description": "A 3D Tiles tileset represented by an  {@link  Entity } . The tileset modelMatrix is determined by the containing Entity position and orientation or is left unset if position is undefined.",
      "properties": {
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "maximumScreenSpaceError": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the maximum screen space error used to drive level of detail refinement."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the model."
        },
        "uri": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the string Property specifying the URI of the glTF asset."
        }
      },
      "required": [
        "definitionChanged"
      ],
      "type": "object"
    },
    "ClockRange": {
      "description": "Constants used by  {@link  Clock#tick  }  to determine behavior when  {@link  Clock#startTime  }  or  {@link  Clock#stopTime  }  is reached.",
      "enum": [
        0,
        1,
        2
      ],
      "type": "number"
    },
    "ClockStep": {
      "description": "Constants to determine how much time advances with each call to  {@link  Clock#tick  } .",
      "enum": [
        0,
        1,
        2
      ],
      "type": "number"
    },
    "CompositeEntityCollection": {
      "additionalProperties": false,
      "description": "Non-destructively composites multiple  {@link  EntityCollection }  instances into a single collection. If a Entity with the same ID exists in multiple collections, it is non-destructively merged into a single new entity instance.  If an entity has the same property in multiple collections, the property of the Entity in the last collection of the list it belongs to is used.  CompositeEntityCollection can be used almost anywhere that a EntityCollection is used.",
      "properties": {
        "collectionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is fired when entities are added or removed from the collection. The generated event is a  {@link  EntityCollection.collectionChangedEventCallback } ."
        },
        "id": {
          "description": "Gets a globally unique identifier for this collection.",
          "type": "string"
        },
        "owner": {
          "anyOf": [
            {
              "$ref": "#/definitions/DataSource"
            },
            {
              "$ref": "#/definitions/CompositeEntityCollection"
            }
          ],
          "description": "Gets the owner of this composite entity collection, ie. the data source or composite entity collection which created it."
        },
        "values": {
          "description": "Gets the array of Entity instances in the collection. This array should not be modified directly.",
          "items": {
            "$ref": "#/definitions/Entity"
          },
          "type": "array"
        }
      },
      "required": [
        "collectionChanged",
        "id",
        "values",
        "owner"
      ],
      "type": "object"
    },
    "ConstantProperty": {
      "additionalProperties": false,
      "description": "A  {@link  Property }  whose value does not change with respect to simulation time.",
      "properties": {
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever the definition of this property changes. The definition is changed whenever setValue is called with data different than the current value."
        },
        "isConstant": {
          "description": "Gets a value indicating if this property is constant. This property always returns <code>true</code>.",
          "type": "boolean"
        }
      },
      "required": [
        "isConstant",
        "definitionChanged"
      ],
      "type": "object"
    },
    "CorridorGraphics": {
      "additionalProperties": false,
      "description": "Describes a corridor, which is a shape defined by a centerline and width that conforms to the curvature of the globe. It can be placed on the surface or at altitude and can optionally be extruded into a volume.",
      "properties": {
        "classificationType": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  ClassificationType }  Property specifying whether this corridor will classify terrain, 3D Tiles, or both when on the ground."
        },
        "cornerType": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  CornerType }  Property specifying how corners are styled."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this corridor will be displayed."
        },
        "extrudedHeight": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the altitude of the corridor extrusion. Setting this property creates a corridor shaped volume starting at height and ending at this altitude."
        },
        "extrudedHeightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the extruded  {@link  HeightReference } ."
        },
        "fill": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the corridor is filled with the provided material."
        },
        "granularity": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the sampling distance between each latitude and longitude point."
        },
        "height": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the altitude of the corridor."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to fill the corridor."
        },
        "outline": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying whether the corridor is outlined."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline. <p> Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}. </p>"
        },
        "positions": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets a Property specifying the array of  {@link  Cartesian3 }  positions that define the centerline of the corridor."
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the corridor casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the corridor."
        },
        "width": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline."
        },
        "zIndex": {
          "$ref": "#/definitions/ConstantProperty",
          "description": "Gets or sets the zIndex Property specifying the ordering of the corridor.  Only has an effect if the coridor is static and neither height or exturdedHeight are specified."
        }
      },
      "required": [
        "definitionChanged"
      ],
      "type": "object"
    },
    "CylinderGraphics": {
      "additionalProperties": false,
      "description": "Describes a cylinder, truncated cone, or cone defined by a length, top radius, and bottom radius. The center position and orientation are determined by the containing  {@link  Entity } .",
      "properties": {
        "bottomRadius": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the radius of the bottom of the cylinder."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this cylinder will be displayed."
        },
        "fill": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the cylinder is filled with the provided material."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "length": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the length of the cylinder."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to fill the cylinder."
        },
        "numberOfVerticalLines": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the number of vertical lines to draw along the perimeter for the outline."
        },
        "outline": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the cylinder is outlined."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline. <p> Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}. </p>"
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the cylinder casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the cylinder."
        },
        "slices": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the number of edges around the perimeter of the cylinder."
        },
        "topRadius": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the radius of the top of the cylinder."
        }
      },
      "required": [
        "definitionChanged"
      ],
      "type": "object"
    },
    "DataSource": {
      "additionalProperties": false,
      "description": "Defines the interface for data sources, which turn arbitrary data into a\n {@link  EntityCollection }  for generic consumption. This object is an interface for documentation purposes and is not intended to be instantiated directly.",
      "properties": {
        "changedEvent": {
          "$ref": "#/definitions/Event",
          "description": "Gets an event that will be raised when the underlying data changes."
        },
        "clock": {
          "$ref": "#/definitions/DataSourceClock",
          "description": "Gets the preferred clock settings for this data source."
        },
        "clustering": {
          "$ref": "#/definitions/EntityCluster",
          "description": "Gets or sets the clustering options for this data source. This object can be shared between multiple data sources."
        },
        "entities": {
          "$ref": "#/definitions/EntityCollection",
          "description": "Gets the collection of  {@link  Entity }  instances."
        },
        "errorEvent": {
          "$ref": "#/definitions/Event",
          "description": "Gets an event that will be raised if an error is encountered during processing."
        },
        "isLoading": {
          "description": "Gets a value indicating if the data source is currently loading data.",
          "type": "boolean"
        },
        "loadingEvent": {
          "$ref": "#/definitions/Event",
          "description": "Gets an event that will be raised when the value of isLoading changes."
        },
        "name": {
          "description": "Gets a human-readable name for this instance.",
          "type": "string"
        },
        "show": {
          "description": "Gets whether or not this data source should be displayed.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "clock",
        "entities",
        "isLoading",
        "changedEvent",
        "errorEvent",
        "loadingEvent",
        "show",
        "clustering"
      ],
      "type": "object"
    },
    "DataSourceClock": {
      "additionalProperties": false,
      "description": "Represents desired clock settings for a particular  {@link  DataSource } .  These settings may be applied to the  {@link  Clock }  when the DataSource is loaded.",
      "properties": {
        "clockRange": {
          "$ref": "#/definitions/ClockRange",
          "description": "Gets or sets the desired clock range setting. See  {@link  Clock#clockRange  } ."
        },
        "clockStep": {
          "$ref": "#/definitions/ClockStep",
          "description": "Gets or sets the desired clock step setting. See  {@link  Clock#clockStep  } ."
        },
        "currentTime": {
          "$ref": "#/definitions/JulianDate",
          "description": "Gets or sets the desired current time when this data source is loaded. See  {@link  Clock#currentTime  } ."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a new property is assigned."
        },
        "multiplier": {
          "description": "Gets or sets the desired clock multiplier. See  {@link  Clock#multiplier  } .",
          "type": "number"
        },
        "startTime": {
          "$ref": "#/definitions/JulianDate",
          "description": "Gets or sets the desired start time of the clock. See  {@link  Clock#startTime  } ."
        },
        "stopTime": {
          "$ref": "#/definitions/JulianDate",
          "description": "Gets or sets the desired stop time of the clock. See  {@link  Clock#stopTime  } ."
        }
      },
      "required": [
        "definitionChanged",
        "startTime",
        "stopTime",
        "currentTime",
        "clockRange",
        "clockStep",
        "multiplier"
      ],
      "type": "object"
    },
    "EllipseGraphics": {
      "additionalProperties": false,
      "description": "Describes an ellipse defined by a center point and semi-major and semi-minor axes. The ellipse conforms to the curvature of the globe and can be placed on the surface or at altitude and can optionally be extruded into a volume. The center point is determined by the containing  {@link  Entity } .",
      "properties": {
        "classificationType": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  ClassificationType }  Property specifying whether this ellipse will classify terrain, 3D Tiles, or both when on the ground."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this ellipse will be displayed."
        },
        "extrudedHeight": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the altitude of the ellipse extrusion. Setting this property creates volume starting at height and ending at this altitude."
        },
        "extrudedHeightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the extruded  {@link  HeightReference } ."
        },
        "fill": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the ellipse is filled with the provided material."
        },
        "granularity": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the angular distance between points on the ellipse."
        },
        "height": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the altitude of the ellipse."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to fill the ellipse."
        },
        "numberOfVerticalLines": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the number of vertical lines to draw along the perimeter for the outline."
        },
        "outline": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying whether the ellipse is outlined."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline. <p> Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}. </p>"
        },
        "rotation": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric property specifying the rotation of the ellipse counter-clockwise from north."
        },
        "semiMajorAxis": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the semi-major axis."
        },
        "semiMinorAxis": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the semi-minor axis."
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the ellipse casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the ellipse."
        },
        "stRotation": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric property specifying the rotation of the ellipse texture counter-clockwise from north."
        },
        "zIndex": {
          "$ref": "#/definitions/ConstantProperty",
          "description": "Gets or sets the zIndex Property specifying the ellipse ordering.  Only has an effect if the ellipse is constant and neither height or extrudedHeight are specified"
        }
      },
      "required": [
        "definitionChanged"
      ],
      "type": "object"
    },
    "EllipsoidGraphics": {
      "additionalProperties": false,
      "description": "Describe an ellipsoid or sphere.  The center position and orientation are determined by the containing  {@link  Entity } .",
      "properties": {
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this ellipsoid will be displayed."
        },
        "fill": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the ellipsoid is filled with the provided material."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "innerRadii": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  Cartesian3 }   {@link  Property }  specifying the inner radii of the ellipsoid."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to fill the ellipsoid."
        },
        "maximumClock": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the maximum clock angle of the ellipsoid."
        },
        "maximumCone": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the maximum cone angle of the ellipsoid."
        },
        "minimumClock": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the minimum clock angle of the ellipsoid."
        },
        "minimumCone": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the minimum cone angle of the ellipsoid."
        },
        "outline": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying whether the ellipsoid is outlined."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline. <p> Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}. </p>"
        },
        "radii": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  Cartesian3 }   {@link  Property }  specifying the radii of the ellipsoid."
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the ellipsoid casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the ellipsoid."
        },
        "slicePartitions": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the number of radial slices per 360 degrees."
        },
        "stackPartitions": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the number of stacks."
        },
        "subdivisions": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the number of samples per outline ring, determining the granularity of the curvature."
        }
      },
      "required": [
        "definitionChanged",
        "material"
      ],
      "type": "object"
    },
    "Entity": {
      "additionalProperties": false,
      "description": "Entity instances aggregate multiple forms of visualization into a single high-level object. They can be created manually and added to  {@link  Viewer#entities  }  or be produced by data sources, such as  {@link  CzmlDataSource }  and  {@link  GeoJsonDataSource } .",
      "properties": {
        "availability": {
          "$ref": "#/definitions/TimeIntervalCollection",
          "description": "The availability, if any, associated with this object. If availability is undefined, it is assumed that this object's other properties will return valid data for any provided time. If availability exists, the objects other properties will only provide valid data if queried within the given interval."
        },
        "billboard": {
          "$ref": "#/definitions/BillboardGraphics",
          "description": "Gets or sets the billboard."
        },
        "box": {
          "$ref": "#/definitions/BoxGraphics",
          "description": "Gets or sets the box."
        },
        "corridor": {
          "$ref": "#/definitions/CorridorGraphics",
          "description": "Gets or sets the corridor."
        },
        "cylinder": {
          "$ref": "#/definitions/CylinderGraphics",
          "description": "Gets or sets the cylinder."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "description": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the description."
        },
        "ellipse": {
          "$ref": "#/definitions/EllipseGraphics",
          "description": "Gets or sets the ellipse."
        },
        "ellipsoid": {
          "$ref": "#/definitions/EllipsoidGraphics",
          "description": "Gets or sets the ellipsoid."
        },
        "entityCollection": {
          "$ref": "#/definitions/EntityCollection",
          "description": "Gets or sets the entity collection that this entity belongs to."
        },
        "id": {
          "description": "Gets the unique ID associated with this object.",
          "type": "string"
        },
        "isShowing": {
          "description": "Gets whether this entity is being displayed, taking into account the visibility of any ancestor entities.",
          "type": "boolean"
        },
        "label": {
          "$ref": "#/definitions/LabelGraphics",
          "description": "Gets or sets the label."
        },
        "model": {
          "$ref": "#/definitions/ModelGraphics",
          "description": "Gets or sets the model."
        },
        "name": {
          "description": "Gets or sets the name of the object.  The name is intended for end-user consumption and does not need to be unique.",
          "type": "string"
        },
        "orientation": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the orientation."
        },
        "parent": {
          "$ref": "#/definitions/Entity",
          "description": "Gets or sets the parent object."
        },
        "path": {
          "$ref": "#/definitions/PathGraphics",
          "description": "Gets or sets the path."
        },
        "plane": {
          "$ref": "#/definitions/PlaneGraphics",
          "description": "Gets or sets the plane."
        },
        "point": {
          "$ref": "#/definitions/PointGraphics",
          "description": "Gets or sets the point graphic."
        },
        "polygon": {
          "$ref": "#/definitions/PolygonGraphics",
          "description": "Gets or sets the polygon."
        },
        "polyline": {
          "$ref": "#/definitions/PolylineGraphics",
          "description": "Gets or sets the polyline."
        },
        "polylineVolume": {
          "$ref": "#/definitions/PolylineVolumeGraphics",
          "description": "Gets or sets the polyline volume."
        },
        "position": {
          "$ref": "#/definitions/PositionProperty",
          "description": "Gets or sets the position."
        },
        "properties": {
          "$ref": "#/definitions/PropertyBag",
          "description": "Gets or sets the bag of arbitrary properties associated with this entity."
        },
        "propertyNames": {
          "description": "Gets the names of all properties registered on this instance.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "rectangle": {
          "$ref": "#/definitions/RectangleGraphics",
          "description": "Gets or sets the rectangle."
        },
        "show": {
          "description": "Gets or sets whether this entity should be displayed. When set to true, the entity is only displayed if the parent entity's show property is also true.",
          "type": "boolean"
        },
        "tileset": {
          "$ref": "#/definitions/Cesium3DTilesetGraphics",
          "description": "Gets or sets the tileset."
        },
        "viewFrom": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the suggested initial offset when tracking this object. The offset is typically defined in the east-north-up reference frame, but may be another frame depending on the object's velocity."
        },
        "wall": {
          "$ref": "#/definitions/WallGraphics",
          "description": "Gets or sets the wall."
        }
      },
      "required": [
        "entityCollection",
        "id",
        "definitionChanged",
        "show",
        "isShowing",
        "propertyNames"
      ],
      "type": "object"
    },
    "EntityCluster": {
      "additionalProperties": false,
      "description": "Defines how screen space objects (billboards, points, labels) are clustered.",
      "properties": {
        "clusterBillboards": {
          "description": "Gets or sets whether clustering billboard entities is enabled.",
          "type": "boolean"
        },
        "clusterEvent": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that will be raised when a new cluster will be displayed. The signature of the event listener is  {@link  EntityCluster.newClusterCallback } ."
        },
        "clusterLabels": {
          "description": "Gets or sets whether clustering labels entities is enabled.",
          "type": "boolean"
        },
        "clusterPoints": {
          "description": "Gets or sets whether clustering point entities is enabled.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Gets or sets whether clustering is enabled.",
          "type": "boolean"
        },
        "minimumClusterSize": {
          "description": "Gets or sets the minimum number of screen space objects that can be clustered.",
          "type": "number"
        },
        "pixelRange": {
          "description": "Gets or sets the pixel range to extend the screen space bounding box.",
          "type": "number"
        },
        "show": {
          "description": "Determines if entities in this collection will be shown.",
          "type": "boolean"
        }
      },
      "required": [
        "show",
        "enabled",
        "pixelRange",
        "minimumClusterSize",
        "clusterEvent",
        "clusterBillboards",
        "clusterLabels",
        "clusterPoints"
      ],
      "type": "object"
    },
    "EntityCollection": {
      "additionalProperties": false,
      "description": "An observable collection of  {@link  Entity }  instances where each entity has a unique id.",
      "properties": {
        "collectionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is fired when entities are added or removed from the collection. The generated event is a  {@link  EntityCollection.collectionChangedEventCallback } ."
        },
        "id": {
          "description": "Gets a globally unique identifier for this collection.",
          "type": "string"
        },
        "owner": {
          "anyOf": [
            {
              "$ref": "#/definitions/DataSource"
            },
            {
              "$ref": "#/definitions/CompositeEntityCollection"
            }
          ],
          "description": "Gets the owner of this entity collection, ie. the data source or composite entity collection which created it."
        },
        "show": {
          "description": "Gets whether or not this entity collection should be displayed.  When true, each entity is only displayed if its own show property is also true.",
          "type": "boolean"
        },
        "values": {
          "description": "Gets the array of Entity instances in the collection. This array should not be modified directly.",
          "items": {
            "$ref": "#/definitions/Entity"
          },
          "type": "array"
        }
      },
      "required": [
        "collectionChanged",
        "id",
        "values",
        "show",
        "owner"
      ],
      "type": "object"
    },
    "Event": {
      "additionalProperties": false,
      "description": "A generic utility class for managing subscribers for a particular event. This class is usually instantiated inside of a container class and exposed as a property for others to subscribe to.",
      "properties": {
        "numberOfListeners": {
          "description": "The number of listeners currently subscribed to the event.",
          "type": "number"
        }
      },
      "required": [
        "numberOfListeners"
      ],
      "type": "object"
    },
    "JulianDate": {
      "additionalProperties": false,
      "description": "Represents an astronomical Julian date, which is the number of days since noon on January 1, -4712 (4713 BC). For increased precision, this class stores the whole number part of the date and the seconds part of the date in separate components.  In order to be safe for arithmetic and represent leap seconds, the date is always stored in the International Atomic Time standard\n {@link  TimeStandard.TAI } .",
      "properties": {
        "dayNumber": {
          "description": "Gets or sets the number of whole days.",
          "type": "number"
        },
        "secondsOfDay": {
          "description": "Gets or sets the number of seconds into the current day.",
          "type": "number"
        }
      },
      "required": [
        "dayNumber",
        "secondsOfDay"
      ],
      "type": "object"
    },
    "LabelGraphics": {
      "additionalProperties": false,
      "description": "Describes a two dimensional label located at the position of the containing  {@link  Entity } . <p> <div align='center'> <img src='Images/Label.png' width='400' height='300' /><br /> Example labels </div> </p>",
      "properties": {
        "backgroundColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the background  {@link  Color } ."
        },
        "backgroundPadding": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  Cartesian2 }  Property specifying the label's horizontal and vertical background padding in pixels."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "disableDepthTestDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain. When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this label will be displayed."
        },
        "eyeOffset": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  Cartesian3 }  Property specifying the label's offset in eye coordinates. Eye coordinates is a left-handed coordinate system, where <code>x</code> points towards the viewer's right, <code>y</code> points up, and <code>z</code> points into the screen. <p> An eye offset is commonly used to arrange multiple labels or objects at the same position, e.g., to arrange a label above its corresponding 3D model. </p> Below, the label is positioned at the center of the Earth but an eye offset makes it always appear on top of the Earth regardless of the viewer's or Earth's orientation. <p> <div align='center'> <table border='0' cellpadding='5'><tr> <td align='center'><img src='Images/Billboard.setEyeOffset.one.png' width='250' height='188' /></td> <td align='center'><img src='Images/Billboard.setEyeOffset.two.png' width='250' height='188' /></td> </tr></table> <code>l.eyeOffset = new Cartesian3(0.0, 8000000.0, 0.0);</code><br /><br /> </div> </p>"
        },
        "fillColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the fill  {@link  Color } ."
        },
        "font": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the string Property specifying the font in CSS syntax."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "horizontalOrigin": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HorizontalOrigin } ."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the outline  {@link  Color } ."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the outline width."
        },
        "pixelOffset": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  Cartesian2 }  Property specifying the label's pixel offset in screen space from the origin of this label.  This is commonly used to align multiple labels and labels at the same position, e.g., an image and text.  The screen space origin is the top, left corner of the canvas; <code>x</code> increases from left to right, and <code>y</code> increases from top to bottom. <p> <div align='center'> <table border='0' cellpadding='5'><tr> <td align='center'><code>default</code><br/><img src='Images/Label.setPixelOffset.default.png' width='250' height='188' /></td> <td align='center'><code>l.pixeloffset = new Cartesian2(25, 75);</code><br/><img src='Images/Label.setPixelOffset.x50y-25.png' width='250' height='188' /></td> </tr></table> The label's origin is indicated by the yellow point. </div> </p>"
        },
        "pixelOffsetScaleByDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets  {@link  NearFarScalar }  Property specifying the pixel offset of the label based on the distance from the camera. A label's pixel offset will interpolate between the  {@link  NearFarScalar#nearValue  }  and\n {@link  NearFarScalar#farValue  }  while the camera distance falls within the lower and upper bounds of the specified  {@link  NearFarScalar#near  }  and  {@link  NearFarScalar#far  } . Outside of these ranges the label's pixel offset remains clamped to the nearest bound."
        },
        "scale": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the uniform scale to apply to the image. A scale greater than <code>1.0</code> enlarges the label while a scale less than <code>1.0</code> shrinks it. <p> <div align='center'> <img src='Images/Label.setScale.png' width='400' height='300' /><br/> From left to right in the above image, the scales are <code>0.5</code>, <code>1.0</code>, and <code>2.0</code>. </div> </p>"
        },
        "scaleByDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets near and far scaling properties of a Label based on the label's distance from the camera. A label's scale will interpolate between the  {@link  NearFarScalar#nearValue  }  and\n {@link  NearFarScalar#farValue  }  while the camera distance falls within the lower and upper bounds of the specified  {@link  NearFarScalar#near  }  and  {@link  NearFarScalar#far  } . Outside of these ranges the label's scale remains clamped to the nearest bound.  If undefined, scaleByDistance will be disabled."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the label."
        },
        "showBackground": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the background behind the label."
        },
        "style": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  LabelStyle } ."
        },
        "text": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the string Property specifying the text of the label. Explicit newlines '\\n' are supported."
        },
        "translucencyByDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets  {@link  NearFarScalar }  Property specifying the translucency of the label based on the distance from the camera. A label's translucency will interpolate between the  {@link  NearFarScalar#nearValue  }  and\n {@link  NearFarScalar#farValue  }  while the camera distance falls within the lower and upper bounds of the specified  {@link  NearFarScalar#near  }  and  {@link  NearFarScalar#far  } . Outside of these ranges the label's translucency remains clamped to the nearest bound."
        },
        "verticalOrigin": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  VerticalOrigin } ."
        }
      },
      "required": [
        "definitionChanged"
      ],
      "type": "object"
    },
    "MaterialProperty": {
      "additionalProperties": false,
      "description": "The interface for all  {@link  Property }  objects that represent  {@link  Material }  uniforms. This type defines an interface and cannot be instantiated directly.",
      "properties": {
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever the definition of this property changes. The definition is considered to have changed if a call to getValue would return a different result for the same time."
        },
        "isConstant": {
          "description": "Gets a value indicating if this property is constant.  A property is considered constant if getValue always returns the same result for the current definition.",
          "type": "boolean"
        }
      },
      "required": [
        "isConstant",
        "definitionChanged"
      ],
      "type": "object"
    },
    "ModelGraphics": {
      "additionalProperties": false,
      "description": "A 3D model based on  {@link  https ://github.com/KhronosGroup/glTF|glTF } , the runtime asset format for WebGL, OpenGL ES, and OpenGL. The position and orientation of the model is determined by the containing  {@link  Entity } . <p> Cesium includes support for glTF geometry, materials, animations, and skinning. Cameras and lights are not currently supported. </p>",
      "properties": {
        "articulations": {
          "$ref": "#/definitions/PropertyBag",
          "description": "Gets or sets the set of articulation values to apply to this model.  This is represented as an  {@link  PropertyBag } , where keys are composed as the name of the articulation, a single space, and the name of the stage."
        },
        "clampAnimations": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying if glTF animations should hold the last pose for time durations with no keyframes."
        },
        "clippingPlanes": {
          "$ref": "#/definitions/Property",
          "description": "A property specifying the  {@link  ClippingPlaneCollection }  used to selectively disable rendering the model."
        },
        "color": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  that blends with the model's rendered color."
        },
        "colorBlendAmount": {
          "$ref": "#/definitions/Property",
          "description": "A numeric Property specifying the color strength when the <code>colorBlendMode</code> is MIX. A value of 0.0 results in the model's rendered color while a value of 1.0 results in a solid color, with any value in-between resulting in a mix of the two."
        },
        "colorBlendMode": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the enum Property specifying how the color blends with the model."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this model will be displayed."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "imageBasedLightingFactor": {
          "$ref": "#/definitions/Property",
          "description": "A property specifying the  {@link  Cartesian2 }  used to scale the diffuse and specular image-based lighting contribution to the final color."
        },
        "incrementallyLoadTextures": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the boolean Property specifying whether textures may continue to stream in after the model is loaded."
        },
        "lightColor": {
          "$ref": "#/definitions/Property",
          "description": "A property specifying the  {@link  Cartesian3 }  light color when shading the model. When <code>undefined</code> the scene's light color is used instead."
        },
        "maximumScale": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the maximum scale size of a model. This property is used as an upper limit for\n {@link  ModelGraphics#minimumPixelSize  } ."
        },
        "minimumPixelSize": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the approximate minimum pixel size of the model regardless of zoom. This can be used to ensure that a model is visible even when the viewer zooms out.  When <code>0.0</code>, no minimum size is enforced."
        },
        "nodeTransformations": {
          "$ref": "#/definitions/PropertyBag",
          "description": "Gets or sets the set of node transformations to apply to this model.  This is represented as an  {@link  PropertyBag } , where keys are names of nodes, and values are  {@link  TranslationRotationScale }  Properties describing the transformation to apply to that node. The transformation is applied after the node's existing transformation as specified in the glTF, and does not replace the node's existing transformation."
        },
        "runAnimations": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying if glTF animations should be run."
        },
        "scale": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying a uniform linear scale for this model. Values greater than 1.0 increase the size of the model while values less than 1.0 decrease it."
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the model casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the model."
        },
        "silhouetteColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the silhouette."
        },
        "silhouetteSize": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the size of the silhouette in pixels."
        },
        "uri": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the string Property specifying the URI of the glTF asset."
        }
      },
      "required": [
        "definitionChanged",
        "nodeTransformations",
        "articulations"
      ],
      "type": "object"
    },
    "PathGraphics": {
      "additionalProperties": false,
      "description": "Describes a polyline defined as the path made by an  {@link  Entity }  as it moves over time.",
      "properties": {
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this path will be displayed."
        },
        "leadTime": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the number of seconds in front of the object to show."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to draw the path."
        },
        "resolution": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the maximum number of seconds to step when sampling the position."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the path."
        },
        "trailTime": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the number of seconds behind the object to show."
        },
        "width": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width in pixels."
        }
      },
      "required": [
        "definitionChanged",
        "material"
      ],
      "type": "object"
    },
    "PlaneGraphics": {
      "additionalProperties": false,
      "description": "Describes a plane. The center position and orientation are determined by the containing  {@link  Entity } .",
      "properties": {
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "dimensions": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  Cartesian2 }  Property specifying the width and height of the plane."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this plane will be displayed."
        },
        "fill": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the plane is filled with the provided material."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the material used to fill the plane."
        },
        "outline": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying whether the plane is outlined."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline. <p> Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}. </p>"
        },
        "plane": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  Plane }  Property specifying the normal and distance of the plane."
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the plane casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the plane."
        }
      },
      "required": [
        "definitionChanged",
        "material"
      ],
      "type": "object"
    },
    "PointGraphics": {
      "additionalProperties": false,
      "description": "Describes a graphical point located at the position of the containing  {@link  Entity } .",
      "properties": {
        "color": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the point."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "disableDepthTestDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the distance from the camera at which to disable the depth test to, for example, prevent clipping against terrain. When set to zero, the depth test is always applied. When set to Number.POSITIVE_INFINITY, the depth test is never applied."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this point will be displayed."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the the outline width in pixels."
        },
        "pixelSize": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the size in pixels."
        },
        "scaleByDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  NearFarScalar }  Property used to scale the point based on distance. If undefined, a constant size is used."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the point."
        },
        "translucencyByDistance": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets  {@link  NearFarScalar }  Property specifying the translucency of the point based on the distance from the camera. A point's translucency will interpolate between the  {@link  NearFarScalar#nearValue  }  and\n {@link  NearFarScalar#farValue  }  while the camera distance falls within the lower and upper bounds of the specified  {@link  NearFarScalar#near  }  and  {@link  NearFarScalar#far  } . Outside of these ranges the points's translucency remains clamped to the nearest bound."
        }
      },
      "required": [
        "definitionChanged"
      ],
      "type": "object"
    },
    "PolygonGraphics": {
      "additionalProperties": false,
      "description": "Describes a polygon defined by an hierarchy of linear rings which make up the outer shape and any nested holes. The polygon conforms to the curvature of the globe and can be placed on the surface or at altitude and can optionally be extruded into a volume.",
      "properties": {
        "arcType": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  ArcType }  Property specifying the type of lines the polygon edges use."
        },
        "classificationType": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  ClassificationType }  Property specifying whether this polygon will classify terrain, 3D Tiles, or both when on the ground."
        },
        "closeBottom": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets a boolean specifying whether or not the bottom of an extruded polygon is included."
        },
        "closeTop": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets a boolean specifying whether or not the top of an extruded polygon is included."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this polygon will be displayed."
        },
        "extrudedHeight": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the altitude of the polygon extrusion. If  {@link  PolygonGraphics#perPositionHeight  }  is false, the volume starts at  {@link  PolygonGraphics#height  }  and ends at this altitude. If  {@link  PolygonGraphics#perPositionHeight  }  is true, the volume starts at the height of each  {@link  PolygonGraphics#hierarchy  }  position and ends at this altitude."
        },
        "extrudedHeightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the extruded  {@link  HeightReference } ."
        },
        "fill": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the polygon is filled with the provided material."
        },
        "granularity": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the angular distance between points on the polygon."
        },
        "height": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the constant altitude of the polygon."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "hierarchy": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  PolygonHierarchy } ."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to fill the polygon."
        },
        "outline": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying whether the polygon is outlined."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline. <p> Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}. </p>"
        },
        "perPositionHeight": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean specifying whether or not the the height of each position is used. If true, the shape will have non-uniform altitude defined by the height of each  {@link  PolygonGraphics#hierarchy  }  position. If false, the shape will have a constant altitude as specified by  {@link  PolygonGraphics#height  } ."
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the polygon casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the polygon."
        },
        "stRotation": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric property specifying the rotation of the polygon texture counter-clockwise from north."
        },
        "zIndex": {
          "$ref": "#/definitions/ConstantProperty",
          "description": "Gets or sets the zIndex Prperty specifying the ordering of ground geometry.  Only has an effect if the polygon is constant and neither height or extrudedHeight are specified."
        }
      },
      "required": [
        "definitionChanged",
        "material"
      ],
      "type": "object"
    },
    "PolylineGraphics": {
      "additionalProperties": false,
      "description": "Describes a polyline. The first two positions define a line segment, and each additional position defines a line segment from the previous position. The segments can be linear connected points, great arcs, or clamped to terrain.",
      "properties": {
        "arcType": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  ArcType }  Property specifying whether the line segments should be great arcs, rhumb lines or linearly connected."
        },
        "clampToGround": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the polyline should be clamped to the ground."
        },
        "classificationType": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  ClassificationType }  Property specifying whether this polyline will classify terrain, 3D Tiles, or both when on the ground."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "depthFailMaterial": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to draw the polyline when it fails the depth test. <p> Requires the EXT_frag_depth WebGL extension to render properly. If the extension is not supported, there may be artifacts. </p>"
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this polyline will be displayed."
        },
        "granularity": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the angular distance between each latitude and longitude if arcType is not ArcType.NONE and clampToGround is false."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to draw the polyline."
        },
        "positions": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the array of  {@link  Cartesian3 } \npositions that define the line strip."
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the polyline casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the polyline."
        },
        "width": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width in pixels."
        },
        "zIndex": {
          "$ref": "#/definitions/ConstantProperty",
          "description": "Gets or sets the zIndex Property specifying the ordering of the polyline. Only has an effect if `clampToGround` is true and polylines on terrain is supported."
        }
      },
      "required": [
        "definitionChanged",
        "material",
        "depthFailMaterial"
      ],
      "type": "object"
    },
    "PolylineVolumeGraphics": {
      "additionalProperties": false,
      "description": "Describes a polyline volume defined as a line strip and corresponding two dimensional shape which is extruded along it. The resulting volume conforms to the curvature of the globe.",
      "properties": {
        "cornerType": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  CornerType }  Property specifying the style of the corners."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this volume will be displayed."
        },
        "fill": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the volume is filled with the provided material."
        },
        "granularity": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the angular distance between points on the volume."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to fill the volume."
        },
        "outline": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying whether the volume is outlined."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline. <p> Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}. </p>"
        },
        "positions": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the array of  {@link  Cartesian3 }  positions which define the line strip."
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the volume casts or receives shadows from light sources."
        },
        "shape": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the array of  {@link  Cartesian2 }  positions which define the shape to be extruded."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the volume."
        }
      },
      "required": [
        "definitionChanged",
        "material"
      ],
      "type": "object"
    },
    "PositionProperty": {
      "additionalProperties": false,
      "description": "The interface for all  {@link  Property }  objects that define a world location as a  {@link  Cartesian3 }  with an associated  {@link  ReferenceFrame } . This type defines an interface and cannot be instantiated directly.",
      "properties": {
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever the definition of this property changes. The definition is considered to have changed if a call to getValue would return a different result for the same time."
        },
        "isConstant": {
          "description": "Gets a value indicating if this property is constant.  A property is considered constant if getValue always returns the same result for the current definition.",
          "type": "boolean"
        },
        "referenceFrame": {
          "$ref": "#/definitions/ReferenceFrame",
          "description": "Gets the reference frame that the position is defined in."
        }
      },
      "required": [
        "isConstant",
        "definitionChanged",
        "referenceFrame"
      ],
      "type": "object"
    },
    "Property": {
      "additionalProperties": false,
      "description": "The interface for all properties, which represent a value that can optionally vary over time. This type defines an interface and cannot be instantiated directly.",
      "properties": {
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever the definition of this property changes. The definition is considered to have changed if a call to getValue would return a different result for the same time."
        },
        "isConstant": {
          "description": "Gets a value indicating if this property is constant.  A property is considered constant if getValue always returns the same result for the current definition.",
          "type": "boolean"
        }
      },
      "required": [
        "isConstant",
        "definitionChanged"
      ],
      "type": "object"
    },
    "PropertyBag": {
      "description": "A  {@link  Property }  whose value is a key-value mapping of property names to the computed value of other properties.",
      "properties": {},
      "type": "object"
    },
    "RectangleGraphics": {
      "additionalProperties": false,
      "description": "Describes graphics for a  {@link  Rectangle } . The rectangle conforms to the curvature of the globe and can be placed on the surface or at altitude and can optionally be extruded into a volume.",
      "properties": {
        "classificationType": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  ClassificationType }  Property specifying whether this rectangle will classify terrain, 3D Tiles, or both when on the ground."
        },
        "coordinates": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Rectangle } ."
        },
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this rectangle will be displayed."
        },
        "extrudedHeight": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the altitude of the rectangle extrusion. Setting this property creates volume starting at height and ending at this altitude."
        },
        "extrudedHeightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the extruded  {@link  HeightReference } ."
        },
        "fill": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the rectangle is filled with the provided material."
        },
        "granularity": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the angular distance between points on the rectangle."
        },
        "height": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the altitude of the rectangle."
        },
        "heightReference": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  HeightReference } ."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to fill the rectangle."
        },
        "outline": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying whether the rectangle is outlined."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline. <p> Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}. </p>"
        },
        "rotation": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric property specifying the rotation of the rectangle clockwise from north."
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the rectangle casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the rectangle."
        },
        "stRotation": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric property specifying the rotation of the rectangle texture counter-clockwise from north."
        },
        "zIndex": {
          "$ref": "#/definitions/ConstantProperty",
          "description": "Gets or sets the zIndex Property specifying the ordering of the rectangle.  Only has an effect if the rectangle is constant and neither height or extrudedHeight are specified."
        }
      },
      "required": [
        "definitionChanged",
        "material"
      ],
      "type": "object"
    },
    "ReferenceFrame": {
      "description": "Constants for identifying well-known reference frames.",
      "enum": [
        0,
        1
      ],
      "type": "number"
    },
    "TimeIntervalCollection": {
      "additionalProperties": false,
      "description": "A non-overlapping collection of  {@link  TimeInterval }  instances sorted by start time.",
      "properties": {
        "changedEvent": {
          "$ref": "#/definitions/Event",
          "description": "Gets an event that is raised whenever the collection of intervals change."
        },
        "isEmpty": {
          "description": "Gets whether or not the collection is empty.",
          "type": "boolean"
        },
        "isStartIncluded": {
          "description": "Gets whether or not the start time is included in the collection.",
          "type": "boolean"
        },
        "isStopIncluded": {
          "description": "Gets whether or not the stop time is included in the collection.",
          "type": "boolean"
        },
        "length": {
          "description": "Gets the number of intervals in the collection.",
          "type": "number"
        },
        "start": {
          "$ref": "#/definitions/JulianDate",
          "description": "Gets the start time of the collection."
        },
        "stop": {
          "$ref": "#/definitions/JulianDate",
          "description": "Gets the stop time of the collection."
        }
      },
      "required": [
        "changedEvent",
        "start",
        "isStartIncluded",
        "stop",
        "isStopIncluded",
        "length",
        "isEmpty"
      ],
      "type": "object"
    },
    "WallGraphics": {
      "additionalProperties": false,
      "description": "Describes a two dimensional wall defined as a line strip and optional maximum and minimum heights. The wall conforms to the curvature of the globe and can be placed along the surface or at altitude.",
      "properties": {
        "definitionChanged": {
          "$ref": "#/definitions/Event",
          "description": "Gets the event that is raised whenever a property or sub-property is changed or modified."
        },
        "distanceDisplayCondition": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the  {@link  DistanceDisplayCondition }  Property specifying at what distance from the camera that this wall will be displayed."
        },
        "fill": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying whether the wall is filled with the provided material."
        },
        "granularity": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the angular distance between points on the wall."
        },
        "material": {
          "$ref": "#/definitions/MaterialProperty",
          "description": "Gets or sets the Property specifying the material used to fill the wall."
        },
        "maximumHeights": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying an array of heights to be used for the top of the wall instead of the height of each position. If defined, the array must be the same length as  {@link  Wall#positions  } ."
        },
        "minimumHeights": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying an array of heights to be used for the bottom of the wall instead of the surface of the globe. If defined, the array must be the same length as  {@link  Wall#positions  } ."
        },
        "outline": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying whether the wall is outlined."
        },
        "outlineColor": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the  {@link  Color }  of the outline."
        },
        "outlineWidth": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the numeric Property specifying the width of the outline. <p> Note: This property will be ignored on all major browsers on Windows platforms. For details, see (@link https://github.com/CesiumGS/cesium/issues/40}. </p>"
        },
        "positions": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the Property specifying the array of  {@link  Cartesian3 }  positions which define the top of the wall."
        },
        "shadows": {
          "$ref": "#/definitions/Property",
          "description": "Get or sets the enum Property specifying whether the wall casts or receives shadows from light sources."
        },
        "show": {
          "$ref": "#/definitions/Property",
          "description": "Gets or sets the boolean Property specifying the visibility of the wall."
        }
      },
      "required": [
        "definitionChanged",
        "material"
      ],
      "type": "object"
    }
  }
}
